#nullable enable
PDFtoImage.RenderOptions
PDFtoImage.RenderOptions.AntiAliasing.get -> PDFtoImage.PdfAntiAliasing
PDFtoImage.RenderOptions.AntiAliasing.init -> void
PDFtoImage.RenderOptions.BackgroundColor.get -> SkiaSharp.SKColor?
PDFtoImage.RenderOptions.BackgroundColor.init -> void
PDFtoImage.RenderOptions.Bounds.get -> System.Drawing.RectangleF?
PDFtoImage.RenderOptions.Bounds.init -> void
PDFtoImage.RenderOptions.Dpi.get -> int
PDFtoImage.RenderOptions.Dpi.init -> void
PDFtoImage.RenderOptions.Height.get -> int?
PDFtoImage.RenderOptions.Height.init -> void
PDFtoImage.RenderOptions.RenderOptions() -> void
PDFtoImage.RenderOptions.RenderOptions(int Dpi = 300, int? Width = null, int? Height = null, bool WithAnnotations = false, bool WithFormFill = false, bool WithAspectRatio = false, PDFtoImage.PdfRotation Rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing AntiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? BackgroundColor = null, System.Drawing.RectangleF? Bounds = null) -> void
PDFtoImage.RenderOptions.Rotation.get -> PDFtoImage.PdfRotation
PDFtoImage.RenderOptions.Rotation.init -> void
PDFtoImage.RenderOptions.Width.get -> int?
PDFtoImage.RenderOptions.Width.init -> void
PDFtoImage.RenderOptions.WithAnnotations.get -> bool
PDFtoImage.RenderOptions.WithAnnotations.init -> void
PDFtoImage.RenderOptions.WithAspectRatio.get -> bool
PDFtoImage.RenderOptions.WithAspectRatio.init -> void
PDFtoImage.RenderOptions.WithFormFill.get -> bool
PDFtoImage.RenderOptions.WithFormFill.init -> void
PDFtoImage.PdfAntiAliasing
PDFtoImage.PdfAntiAliasing.None = 0 -> PDFtoImage.PdfAntiAliasing
PDFtoImage.PdfAntiAliasing.Text = 1 -> PDFtoImage.PdfAntiAliasing
PDFtoImage.PdfAntiAliasing.Images = 2 -> PDFtoImage.PdfAntiAliasing
PDFtoImage.PdfAntiAliasing.Paths = 4 -> PDFtoImage.PdfAntiAliasing
PDFtoImage.PdfAntiAliasing.All = PDFtoImage.PdfAntiAliasing.Text | PDFtoImage.PdfAntiAliasing.Images | PDFtoImage.PdfAntiAliasing.Paths -> PDFtoImage.PdfAntiAliasing
PDFtoImage.PdfRotation
PDFtoImage.PdfRotation.Rotate0 = 0 -> PDFtoImage.PdfRotation
PDFtoImage.PdfRotation.Rotate180 = 2 -> PDFtoImage.PdfRotation
PDFtoImage.PdfRotation.Rotate270 = 3 -> PDFtoImage.PdfRotation
PDFtoImage.PdfRotation.Rotate90 = 1 -> PDFtoImage.PdfRotation
PDFtoImage.Exceptions.PdfCannotOpenFileException
PDFtoImage.Exceptions.PdfCannotOpenFileException.PdfCannotOpenFileException() -> void
PDFtoImage.Exceptions.PdfException
PDFtoImage.Exceptions.PdfException.PdfException(string! message) -> void
PDFtoImage.Exceptions.PdfInvalidFormatException
PDFtoImage.Exceptions.PdfInvalidFormatException.PdfInvalidFormatException() -> void
PDFtoImage.Exceptions.PdfPageNotFoundException
PDFtoImage.Exceptions.PdfPageNotFoundException.PdfPageNotFoundException() -> void
PDFtoImage.Exceptions.PdfPasswordProtectedException
PDFtoImage.Exceptions.PdfPasswordProtectedException.PdfPasswordProtectedException() -> void
PDFtoImage.Exceptions.PdfUnknownException
PDFtoImage.Exceptions.PdfUnknownException.PdfUnknownException() -> void
PDFtoImage.Exceptions.PdfUnsupportedSecuritySchemeException
PDFtoImage.Exceptions.PdfUnsupportedSecuritySchemeException.PdfUnsupportedSecuritySchemeException() -> void
PDFtoImage.Compatibility.Conversion
static PDFtoImage.Compatibility.Conversion.SaveJpeg(string! imageFilename, byte[]! pdfAsByteArray, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveJpeg(string! imageFilename, string! pdfAsBase64String, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveJpeg(string! imageFilename, System.IO.Stream! pdfStream, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveJpeg(System.IO.Stream! imageStream, byte[]! pdfAsByteArray, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveJpeg(System.IO.Stream! imageStream, string! pdfAsBase64String, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveJpeg(System.IO.Stream! imageStream, System.IO.Stream! pdfStream, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SavePng(string! imageFilename, byte[]! pdfAsByteArray, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SavePng(string! imageFilename, string! pdfAsBase64String, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SavePng(string! imageFilename, System.IO.Stream! pdfStream, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SavePng(System.IO.Stream! imageStream, byte[]! pdfAsByteArray, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SavePng(System.IO.Stream! imageStream, string! pdfAsBase64String, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SavePng(System.IO.Stream! imageStream, System.IO.Stream! pdfStream, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveWebp(string! imageFilename, byte[]! pdfAsByteArray, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveWebp(string! imageFilename, string! pdfAsBase64String, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveWebp(string! imageFilename, System.IO.Stream! pdfStream, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveWebp(System.IO.Stream! imageStream, byte[]! pdfAsByteArray, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveWebp(System.IO.Stream! imageStream, string! pdfAsBase64String, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.SaveWebp(System.IO.Stream! imageStream, System.IO.Stream! pdfStream, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> void
static PDFtoImage.Compatibility.Conversion.ToImage(byte[]! pdfAsByteArray, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> SkiaSharp.SKBitmap!
static PDFtoImage.Compatibility.Conversion.ToImage(string! pdfAsBase64String, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> SkiaSharp.SKBitmap!
static PDFtoImage.Compatibility.Conversion.ToImage(System.IO.Stream! pdfStream, bool leaveOpen, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> SkiaSharp.SKBitmap!
static PDFtoImage.Compatibility.Conversion.ToImage(System.IO.Stream! pdfStream, string? password = null, int page = 0, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> SkiaSharp.SKBitmap!
static PDFtoImage.Compatibility.Conversion.ToImages(byte[]! pdfAsByteArray, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> System.Collections.Generic.IEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Compatibility.Conversion.ToImages(string! pdfAsBase64String, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> System.Collections.Generic.IEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Compatibility.Conversion.ToImages(System.IO.Stream! pdfStream, bool leaveOpen, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> System.Collections.Generic.IEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Compatibility.Conversion.ToImages(System.IO.Stream! pdfStream, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null) -> System.Collections.Generic.IEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Compatibility.Conversion.ToImagesAsync(byte[]! pdfAsByteArray, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Compatibility.Conversion.ToImagesAsync(string! pdfAsBase64String, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Compatibility.Conversion.ToImagesAsync(System.IO.Stream! pdfStream, bool leaveOpen, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Compatibility.Conversion.ToImagesAsync(System.IO.Stream! pdfStream, string? password = null, int dpi = 300, int? width = null, int? height = null, bool withAnnotations = false, bool withFormFill = false, bool withAspectRatio = false, PDFtoImage.PdfRotation rotation = PDFtoImage.PdfRotation.Rotate0, PDFtoImage.PdfAntiAliasing antiAliasing = PDFtoImage.PdfAntiAliasing.All, SkiaSharp.SKColor? backgroundColor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<SkiaSharp.SKBitmap!>!
PDFtoImage.Conversion
static PDFtoImage.Conversion.GetPageCount(byte[]! pdfAsByteArray, string? password = null) -> int
static PDFtoImage.Conversion.GetPageCount(string! pdfAsBase64String, string? password = null) -> int
static PDFtoImage.Conversion.GetPageCount(System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null) -> int
static PDFtoImage.Conversion.GetPageSize(byte[]! pdfAsByteArray, int page, string? password = null) -> System.Drawing.SizeF
static PDFtoImage.Conversion.GetPageSize(string! pdfAsBase64String, int page, string? password = null) -> System.Drawing.SizeF
static PDFtoImage.Conversion.GetPageSize(System.IO.Stream! pdfStream, bool leaveOpen = false, int page = 0, string? password = null) -> System.Drawing.SizeF
static PDFtoImage.Conversion.GetPageSizes(byte[]! pdfAsByteArray, string? password = null) -> System.Collections.Generic.IList<System.Drawing.SizeF>!
static PDFtoImage.Conversion.GetPageSizes(string! pdfAsBase64String, string? password = null) -> System.Collections.Generic.IList<System.Drawing.SizeF>!
static PDFtoImage.Conversion.GetPageSizes(System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null) -> System.Collections.Generic.IList<System.Drawing.SizeF>!
static PDFtoImage.Conversion.SaveJpeg(string! imageFilename, byte[]! pdfAsByteArray, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveJpeg(string! imageFilename, string! pdfAsBase64String, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveJpeg(string! imageFilename, System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveJpeg(System.IO.Stream! imageStream, byte[]! pdfAsByteArray, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveJpeg(System.IO.Stream! imageStream, string! pdfAsBase64String, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveJpeg(System.IO.Stream! imageStream, System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SavePng(string! imageFilename, byte[]! pdfAsByteArray, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SavePng(string! imageFilename, string! pdfAsBase64String, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SavePng(string! imageFilename, System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SavePng(System.IO.Stream! imageStream, byte[]! pdfAsByteArray, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SavePng(System.IO.Stream! imageStream, string! pdfAsBase64String, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SavePng(System.IO.Stream! imageStream, System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveWebp(string! imageFilename, byte[]! pdfAsByteArray, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveWebp(string! imageFilename, string! pdfAsBase64String, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveWebp(string! imageFilename, System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveWebp(System.IO.Stream! imageStream, byte[]! pdfAsByteArray, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveWebp(System.IO.Stream! imageStream, string! pdfAsBase64String, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.SaveWebp(System.IO.Stream! imageStream, System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> void
static PDFtoImage.Conversion.ToImage(byte[]! pdfAsByteArray, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> SkiaSharp.SKBitmap!
static PDFtoImage.Conversion.ToImage(string! pdfAsBase64String, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> SkiaSharp.SKBitmap!
static PDFtoImage.Conversion.ToImage(System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, int page = 0, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> SkiaSharp.SKBitmap!
static PDFtoImage.Conversion.ToImages(byte[]! pdfAsByteArray, string? password = null, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> System.Collections.Generic.IEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Conversion.ToImages(string! pdfAsBase64String, string? password = null, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> System.Collections.Generic.IEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Conversion.ToImages(System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions)) -> System.Collections.Generic.IEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Conversion.ToImagesAsync(byte[]! pdfAsByteArray, string? password = null, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Conversion.ToImagesAsync(string! pdfAsBase64String, string? password = null, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<SkiaSharp.SKBitmap!>!
static PDFtoImage.Conversion.ToImagesAsync(System.IO.Stream! pdfStream, bool leaveOpen = false, string? password = null, PDFtoImage.RenderOptions options = default(PDFtoImage.RenderOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<SkiaSharp.SKBitmap!>!